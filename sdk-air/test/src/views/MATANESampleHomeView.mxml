<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" title="MobileAppTracking ANE Test App"
		xmlns:s="library://ns.adobe.com/flex/spark" xmlns:MobileAppTracker="com.hasoffers.nativeExtensions.*">

	<fx:Script>
		<![CDATA[
			import com.hasoffers.nativeExtensions.MobileAppTracker;
			
			import spark.events.TextOperationEvent;

			public var mobileAppTracker:MobileAppTracker;
			public var matAdvertiserId:String;
			public var matConversionKey:String;
			public var eventName:String;
			public var revenue:Number;
			public var currencyCode:String;
			public var itemName:String;
			public var unitPrice:Number;
			public var quantity:int;
			public var itemRevenue:Number;
			public var attr1:String;
			public var attr2:String;
			
			public var flagAutoGenerateParams:Boolean = false;

			public function init():void 
			{
				trace("MATANESampleHomeView.init() start");
				
				matAdvertiserId = "877";
				//matConversionKey = "5afe3bc434184096023e3d8b2ae27e1c"; // johng_test
				matConversionKey = "47d95c07c10f6fdefedbbf4c38f709bb"; // HarshalTestApp
				
				eventName = "evt123";
				revenue = 0.42;
				currencyCode = "USD";
				
				itemName = "item2";
				unitPrice = 1.56;
				quantity = 1;
				itemRevenue = 1.56;
				attr1 = "attr1";
				attr2 = "attr2";
				
				advId.text = matAdvertiserId;
				convKey.text = matConversionKey;
				actionInput.text = eventName;
				revenueInput.text = revenue.toString();
				currencyInput.text = currencyCode;
				itemNameInput.text = itemName;
				itemRevenueInput.text = itemRevenue.toString();
				unitPriceInput.text = unitPrice.toString();
				quantityInput.text = quantity.toString();
				attr1Input.text = attr1;
				attr2Input.text = attr2;
				
				trace("MATANESampleHomeView.init(): getting MobileAppTracker singleton instance.");
				
				mobileAppTracker = MobileAppTracker.instance;
				
				trace("mobileAppTracker = " + mobileAppTracker);
				
				mobileAppTracker.init(matAdvertiserId, matConversionKey);
				
				mobileAppTracker.setDelegate(true);
				mobileAppTracker.setDebugMode(true);
				mobileAppTracker.setAllowDuplicates(true);
				
				mobileAppTracker.setUIID("12345678-1234-1234-1234-123456789012");
				mobileAppTracker.setAppAdTracking(true);
				
				//mobileAppTracker.setPackageName("com.hasofferstestapp"); // johng_test
				mobileAppTracker.setPackageName("com.hasoffers.harshaltestapp"); // HarshalTestApp
				
				trace("MATANESampleHomeView.init() end");
			}

			protected function trackInstall_clickHandler(event:MouseEvent):void
			{
				mobileAppTracker.trackInstall("someref1");
			}

			protected function trackAction_clickHandler(event:MouseEvent):void
			{
				mobileAppTracker.trackAction(eventName, revenue, currencyCode, "ref111", false);
			}

			protected function trackActionWithEventItem_clickHandler(event:MouseEvent):void
			{
				var arrEvents:Array = new Array();
				
				var dict:Dictionary = new Dictionary();
				dict["item"] = itemName;
				dict["unit_price"] = unitPrice;
				dict["quantity"] = quantity;
				dict["revenue"] = itemRevenue;
				dict["attribute1"] = attr1;
				dict["attribute2"] = attr2;
				dict["attribute3"] = ""; // not used in this sample
				dict["attribute4"] = ""; // not used in this sample
				dict["attribute5"] = ""; // not used in this sample
				
				arrEvents.push(dict);
				
				mobileAppTracker.trackActionWithEventItem(eventName, arrEvents, revenue, currencyCode);
			}

			protected function advertiserId_changeHandler(event:TextOperationEvent):void
			{
				// set advertiser id to id's text input
				matAdvertiserId = advId.text;
			}

			protected function conversionKey_changeHandler(event:TextOperationEvent):void
			{
				// set key to key's text input
				matConversionKey = convKey.text;
			}

			protected function action_changeHandler(event:TextOperationEvent):void
			{
				eventName = actionInput.text;
			}

			protected function revenueInput_changeHandler(event:TextOperationEvent):void
			{
				revenue = parseFloat(revenueInput.text);
			}

			protected function currencyInput_changeHandler(event:TextOperationEvent):void
			{
				currencyCode = currencyInput.text;
			}

			protected function itemNameInput_changeHandler(event:TextOperationEvent):void
			{
				itemName = itemNameInput.text;
			}

			protected function unitPriceInput_changeHandler(event:TextOperationEvent):void
			{
				unitPrice = parseFloat(unitPriceInput.text);
			}

			protected function quantityInput_changeHandler(event:TextOperationEvent):void
			{
				quantity = parseInt(quantityInput.text);
			}
			
			protected function itemRevenueInput_changeHandler(event:TextOperationEvent):void
			{
				itemRevenue = parseFloat(itemRevenueInput.text);
			}
			
			protected function attr1Input_changeHandler(event:TextOperationEvent):void
			{
				attr1 = attr1Input.text;
			}
			
			protected function attr2Input_changeHandler(event:TextOperationEvent):void
			{
				attr2 = attr2Input.text;
			}
			
			protected function toggleAutoGenerateFlags_changeHandler(event:MouseEvent):void
			{
				flagAutoGenerateParams = !flagAutoGenerateParams;
				
				mobileAppTracker.setShouldAutoGenerateAppleAdvertisingIdentifier(flagAutoGenerateParams);
				mobileAppTracker.setShouldAutoGenerateAppleVendorIdentifier(flagAutoGenerateParams);
				
				var sdkDataParams:String = mobileAppTracker.getSDKDataParameters();
				sdkDataParams = sdkDataParams.split('","').join('",\n"');
				textSDKDataParams.text = sdkDataParams;
			}
			
			protected function printSDKDataParameters_changeHandler(event:MouseEvent):void
			{
				var sdkDataParams:String = mobileAppTracker.getSDKDataParameters();
				sdkDataParams = sdkDataParams.split('","').join('",\n"');
				trace(sdkDataParams);
				
				textSDKDataParams.text = sdkDataParams;
				
				textSDKDataParams.invalidateDisplayList();
			}

		]]>
	</fx:Script>

	<s:Scroller width="100%" height="100%">
		<s:Group width="100%" height="100%">
			<s:Label text="Advertiser Id" left="10" top="25"/>
			<s:TextInput skinClass="spark.skins.mobile.TextInputSkin" id="advId" change="advertiserId_changeHandler(event)" horizontalCenter="0" top="50"/>

			<s:Label text="Conversion Key" left="10" top="100"/>
			<s:TextInput skinClass="spark.skins.mobile.TextInputSkin" id="convKey" change="conversionKey_changeHandler(event)" initialize="init()" horizontalCenter="0" top="125"/>

			<s:Button label="Track install" click="trackInstall_clickHandler(event)" horizontalCenter="0" top="175" />

			<s:Label text="Event Name" left="10" top="225"/>
			<s:TextInput skinClass="spark.skins.mobile.TextInputSkin" id="actionInput" change="action_changeHandler(event)" horizontalCenter="0" top="250"/>

			<s:Label text="Revenue" left="10" top="300"/>
			<s:Label text="Currency" left="150" top = "300"/>

			<s:TextInput skinClass="spark.skins.mobile.TextInputSkin" id="revenueInput" restrict=".0-9" change="revenueInput_changeHandler(event)" percentWidth="40" left="10" top="325"/>
			<s:TextInput skinClass="spark.skins.mobile.TextInputSkin" id="currencyInput" change="currencyInput_changeHandler(event)" percentWidth="40" left="150" top="325"/>

			<s:Button label="Track action" click="trackAction_clickHandler(event)" horizontalCenter="0" top="375"/>

			<s:Label text="Item Name" left="10" top="425"/>
			<s:TextInput skinClass="spark.skins.mobile.TextInputSkin" id="itemNameInput" change="itemNameInput_changeHandler(event)" horizontalCenter="0" top="450"/>

			<s:Label text="Unit Price" left="10" top="500"/>
			<s:TextInput skinClass="spark.skins.mobile.TextInputSkin" id="unitPriceInput" restrict=".0-9"  change="unitPriceInput_changeHandler(event)" horizontalCenter="0" top="525"/>

			<s:Label text="Quantity" left="10" top="575"/>
			<s:TextInput skinClass="spark.skins.mobile.TextInputSkin" id="quantityInput" restrict="0-9"  change="quantityInput_changeHandler(event)" horizontalCenter="0" top="600"/>
			
			<s:Label text="Item Revenue" left="10" top="650"/>
			<s:TextInput skinClass="spark.skins.mobile.TextInputSkin" id="itemRevenueInput" restrict=".0-9" change="itemRevenueInput_changeHandler(event)" percentWidth="40" left="10" top="675"/>
			
			<s:Label text="Attribute 1" left="10" top="725"/>
			<s:TextInput skinClass="spark.skins.mobile.TextInputSkin" id="attr1Input" change="attr1Input_changeHandler(event)" percentWidth="40" left="10" top="750"/>
			
			<s:Label text="Attribute 2" left="10" top="800"/>
			<s:TextInput skinClass="spark.skins.mobile.TextInputSkin" id="attr2Input" change="attr2Input_changeHandler(event)" percentWidth="40" left="10" top="825"/>

			<s:Button label="Track action with event item" click="trackActionWithEventItem_clickHandler(event)" horizontalCenter="0" top="900"/>
			
			<s:Button label="Toggle AutoGenerated params" click="toggleAutoGenerateFlags_changeHandler(event)" horizontalCenter="0" top="950"/>
			
			<s:Button label="Print SDKDataParameters" click="printSDKDataParameters_changeHandler(event)" horizontalCenter="0" top="1000"/>
			
			<s:Label text="SDKDataParameters" left="10" top="1050"/>
			<s:TextArea id="textSDKDataParams" editable="false" horizontalCenter="0" top="1075" height="300"></s:TextArea>
			
		</s:Group>
	</s:Scroller>
</s:View>