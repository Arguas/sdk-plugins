/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "s3eMATSDK_autodefs.h"
#include "s3eEdk.h"
#include "s3eMATSDK.h"
//Declarations of Init and Term functions
extern s3eResult s3eMATSDKInit();
extern void s3eMATSDKTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static void s3eStartMobileAppTracker_wrap(const char* adId, const char* adKey)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eStartMobileAppTracker"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eStartMobileAppTracker, 2, adId, adKey);
}

static void s3eSDKParameters_wrap()
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eSDKParameters"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eSDKParameters, 0);
}

static void s3eTrackInstall_wrap()
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eTrackInstall"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eTrackInstall, 0);
}

static void s3eTrackUpdate_wrap()
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eTrackUpdate"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eTrackUpdate, 0);
}

static void s3eTrackInstallWithReferenceId_wrap(const char* refId)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eTrackInstallWithReferenceId"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eTrackInstallWithReferenceId, 1, refId);
}

static void s3eTrackActionForEventIdOrName_wrap(const char* eventIdOrName, bool isId, const char* refId)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eTrackActionForEventIdOrName"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eTrackActionForEventIdOrName, 3, eventIdOrName, isId, refId);
}

static void s3eTrackActionForEventIdOrNameItems_wrap(const char* eventIdOrName, bool isId, const s3eMATArray* items, const char* refId, double revenueAmount, const char* currencyCode, uint8 transactionState)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eTrackActionForEventIdOrNameItems"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eTrackActionForEventIdOrNameItems, 7, eventIdOrName, isId, items, refId, revenueAmount, currencyCode, transactionState);
}

static void s3eTrackAction_wrap(const char* eventIdOrName, bool isId, double revenue, const char* currency)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eTrackAction"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eTrackAction, 4, eventIdOrName, isId, revenue, currency);
}

static void s3eStartAppToAppTracking_wrap(const char* targetAppId, const char* advertiserId, const char* offerId, const char* publisherId, bool shouldRedirect)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eStartAppToAppTracking"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eStartAppToAppTracking, 5, targetAppId, advertiserId, offerId, publisherId, shouldRedirect);
}

static void s3eSetPackageName_wrap(const char* packageName)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eSetPackageName"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eSetPackageName, 1, packageName);
}

static void s3eSetCurrencyCode_wrap(const char* currencyCode)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eSetCurrencyCode"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eSetCurrencyCode, 1, currencyCode);
}

static void s3eSetDeviceId_wrap(const char* deviceId)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eSetDeviceId"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eSetDeviceId, 1, deviceId);
}

static void s3eSetOpenUDID_wrap(const char* openUDID)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eSetOpenUDID"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eSetOpenUDID, 1, openUDID);
}

static void s3eSetUserId_wrap(const char* userId)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eSetUserId"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eSetUserId, 1, userId);
}

static void s3eSetRevenue_wrap(double revenue)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eSetRevenue"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eSetRevenue, 1, revenue);
}

static void s3eSetSiteId_wrap(const char* siteId)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eSetSiteId"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eSetSiteId, 1, siteId);
}

static void s3eSetTRUSTeId_wrap(const char* tpid)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eSetTRUSTeId"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eSetTRUSTeId, 1, tpid);
}

static void s3eSetDelegate_wrap(bool enable)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eSetDelegate"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eSetDelegate, 1, enable);
}

static void s3eSetUseHTTPS_wrap(bool enable)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eSetUseHTTPS"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eSetUseHTTPS, 1, enable);
}

static void s3eSetAllowDuplicates_wrap(bool allowDuplicates)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eSetAllowDuplicates"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eSetAllowDuplicates, 1, allowDuplicates);
}

static void s3eSetShouldAutoGenerateMacAddress_wrap(bool shouldAutoGenerate)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eSetShouldAutoGenerateMacAddress"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eSetShouldAutoGenerateMacAddress, 1, shouldAutoGenerate);
}

static void s3eSetShouldAutoGenerateODIN1Key_wrap(bool shouldAutoGenerate)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eSetShouldAutoGenerateODIN1Key"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eSetShouldAutoGenerateODIN1Key, 1, shouldAutoGenerate);
}

static void s3eSetShouldAutoGenerateOpenUDIDKey_wrap(bool shouldAutoGenerate)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eSetShouldAutoGenerateOpenUDIDKey"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eSetShouldAutoGenerateOpenUDIDKey, 1, shouldAutoGenerate);
}

static void s3eSetShouldAutoGenerateVendorIdentifier_wrap(bool shouldAutoGenerate)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eSetShouldAutoGenerateVendorIdentifier"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eSetShouldAutoGenerateVendorIdentifier, 1, shouldAutoGenerate);
}

static void s3eSetShouldAutoGenerateAdvertiserIdentifier_wrap(bool shouldAutoGenerate)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eSetShouldAutoGenerateAdvertiserIdentifier"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eSetShouldAutoGenerateAdvertiserIdentifier, 1, shouldAutoGenerate);
}

static void s3eSetUseCookieTracking_wrap(bool useCookieTracking)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eSetUseCookieTracking"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eSetUseCookieTracking, 1, useCookieTracking);
}

static void s3eSetRedirectUrl_wrap(const char* redirectUrl)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eSetRedirectUrl"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eSetRedirectUrl, 1, redirectUrl);
}

static void s3eSetAdvertiserIdentifier_wrap(const char* advertiserId)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eSetAdvertiserIdentifier"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eSetAdvertiserIdentifier, 1, advertiserId);
}

static void s3eSetVendorIdentifier_wrap(const char* vendorId)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eSetVendorIdentifier"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eSetVendorIdentifier, 1, vendorId);
}

static void s3eSetDebugResponse_wrap(bool shouldDebug)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: s3eSetDebugResponse"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eSetDebugResponse, 1, shouldDebug);
}

#define s3eStartMobileAppTracker s3eStartMobileAppTracker_wrap
#define s3eSDKParameters s3eSDKParameters_wrap
#define s3eTrackInstall s3eTrackInstall_wrap
#define s3eTrackUpdate s3eTrackUpdate_wrap
#define s3eTrackInstallWithReferenceId s3eTrackInstallWithReferenceId_wrap
#define s3eTrackActionForEventIdOrName s3eTrackActionForEventIdOrName_wrap
#define s3eTrackActionForEventIdOrNameItems s3eTrackActionForEventIdOrNameItems_wrap
#define s3eTrackAction s3eTrackAction_wrap
#define s3eStartAppToAppTracking s3eStartAppToAppTracking_wrap
#define s3eSetPackageName s3eSetPackageName_wrap
#define s3eSetCurrencyCode s3eSetCurrencyCode_wrap
#define s3eSetDeviceId s3eSetDeviceId_wrap
#define s3eSetOpenUDID s3eSetOpenUDID_wrap
#define s3eSetUserId s3eSetUserId_wrap
#define s3eSetRevenue s3eSetRevenue_wrap
#define s3eSetSiteId s3eSetSiteId_wrap
#define s3eSetTRUSTeId s3eSetTRUSTeId_wrap
#define s3eSetDelegate s3eSetDelegate_wrap
#define s3eSetUseHTTPS s3eSetUseHTTPS_wrap
#define s3eSetAllowDuplicates s3eSetAllowDuplicates_wrap
#define s3eSetShouldAutoGenerateMacAddress s3eSetShouldAutoGenerateMacAddress_wrap
#define s3eSetShouldAutoGenerateODIN1Key s3eSetShouldAutoGenerateODIN1Key_wrap
#define s3eSetShouldAutoGenerateOpenUDIDKey s3eSetShouldAutoGenerateOpenUDIDKey_wrap
#define s3eSetShouldAutoGenerateVendorIdentifier s3eSetShouldAutoGenerateVendorIdentifier_wrap
#define s3eSetShouldAutoGenerateAdvertiserIdentifier s3eSetShouldAutoGenerateAdvertiserIdentifier_wrap
#define s3eSetUseCookieTracking s3eSetUseCookieTracking_wrap
#define s3eSetRedirectUrl s3eSetRedirectUrl_wrap
#define s3eSetAdvertiserIdentifier s3eSetAdvertiserIdentifier_wrap
#define s3eSetVendorIdentifier s3eSetVendorIdentifier_wrap
#define s3eSetDebugResponse s3eSetDebugResponse_wrap

#endif

void s3eMATSDKRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[30];
    funcPtrs[0] = (void*)s3eStartMobileAppTracker;
    funcPtrs[1] = (void*)s3eSDKParameters;
    funcPtrs[2] = (void*)s3eTrackInstall;
    funcPtrs[3] = (void*)s3eTrackUpdate;
    funcPtrs[4] = (void*)s3eTrackInstallWithReferenceId;
    funcPtrs[5] = (void*)s3eTrackActionForEventIdOrName;
    funcPtrs[6] = (void*)s3eTrackActionForEventIdOrNameItems;
    funcPtrs[7] = (void*)s3eTrackAction;
    funcPtrs[8] = (void*)s3eStartAppToAppTracking;
    funcPtrs[9] = (void*)s3eSetPackageName;
    funcPtrs[10] = (void*)s3eSetCurrencyCode;
    funcPtrs[11] = (void*)s3eSetDeviceId;
    funcPtrs[12] = (void*)s3eSetOpenUDID;
    funcPtrs[13] = (void*)s3eSetUserId;
    funcPtrs[14] = (void*)s3eSetRevenue;
    funcPtrs[15] = (void*)s3eSetSiteId;
    funcPtrs[16] = (void*)s3eSetTRUSTeId;
    funcPtrs[17] = (void*)s3eSetDelegate;
    funcPtrs[18] = (void*)s3eSetUseHTTPS;
    funcPtrs[19] = (void*)s3eSetAllowDuplicates;
    funcPtrs[20] = (void*)s3eSetShouldAutoGenerateMacAddress;
    funcPtrs[21] = (void*)s3eSetShouldAutoGenerateODIN1Key;
    funcPtrs[22] = (void*)s3eSetShouldAutoGenerateOpenUDIDKey;
    funcPtrs[23] = (void*)s3eSetShouldAutoGenerateVendorIdentifier;
    funcPtrs[24] = (void*)s3eSetShouldAutoGenerateAdvertiserIdentifier;
    funcPtrs[25] = (void*)s3eSetUseCookieTracking;
    funcPtrs[26] = (void*)s3eSetRedirectUrl;
    funcPtrs[27] = (void*)s3eSetAdvertiserIdentifier;
    funcPtrs[28] = (void*)s3eSetVendorIdentifier;
    funcPtrs[29] = (void*)s3eSetDebugResponse;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[30] = { 0 };

    /*
     * Register the extension
     */
    s3eEdkRegister("s3eMATSDK", funcPtrs, sizeof(funcPtrs), flags, s3eMATSDKInit, s3eMATSDKTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int s3eMATSDKStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&s3eMATSDKRegisterExt;
    return 0;
}

int g_s3eMATSDKVal = s3eMATSDKStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    s3eMATSDKRegisterExt();
}
#endif

#endif
